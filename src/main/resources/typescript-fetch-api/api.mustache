/* tslint:disable */
import * as url from "url";

export type FetchAPI = typeof fetch;

const isOk = ({ status }: Response) => 200 <= status && status < 300;
const idOrThrow = (response: Response) => isOk(response) ? response : Promise.reject(response);
const toJsonOrThrow = (response: Response) => isOk(response)
    ? response.json()
    : Promise.reject(response);

const BasePath = "{{basePath}}";
const FetchImpl = fetch;

export interface FetchArgs {
    url: string;
    options: RequestInit;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = FetchImpl, basePath: string = BasePath) {
        this.basePath = basePath;
        this.fetch = fetch;
    }
}

{{#models}}
{{#model}}
{{#description}}
/**
 * {{{description}}}
 */
{{/description}}
{{#isEnum}}
export enum {{classname}} {
{{#allowableValues}}
{{#enumVars}}
    {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
{{/enumVars}}
{{/allowableValues}}
}{{/isEnum}}
{{^isEnum}}
export interface {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
{{#description}}
    /**
     * {{{description}}}
     */
{{/description}}
    "{{name}}"{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}
}

{{/isEnum}}

{{/model}}
{{/models}}

{{#apiInfo}}
{{#apis}}
{{#operations}}

/**
 * {{classname}} - fetch parameter creator{{#description}}
 * {{&description}}{{/description}}
 */
export const {{classname}}FetchParamCreactor = {
{{#operation}}
    /** {{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{/allParams}}
     */
    {{nickname}}({{#hasParams}}params: { {{#allParams}} {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/allParams}} }{{/hasParams}}): FetchArgs {
        const baseUrl = `{{path}}`{{#pathParams}}
            .replace(`{${"{{baseName}}"}}`, `${ params.{{paramName}} }`){{/pathParams}};
{{#hasQueryParams}}
            const parsedUrl = url.parse(baseUrl, true);
            parsedUrl.query = Object.assign({}, parsedUrl.query, { {{#queryParams}}"{{baseName}}": params.{{paramName}},{{/queryParams}} })
{{/hasQueryParams}}
        return {
{{^hasQueryParams}}
            url: baseUrl,
{{/hasQueryParams}}
{{#hasQueryParams}}
            url: url.format(parsedUrl),
{{/hasQueryParams}}
            options: {
                method: "{{httpMethod}}",
                headers: {
{{#hasHeaderParam}}
{{/hasHeaderParam}}
{{#hasFormParams}}
                    "Content-Type": "application/x-www-form-urlencoded"
{{/hasFormParams}}
{{#hasBodyParam}}
                    "Content-Type": "application/json"
{{/hasBodyParam}}
{{#headerParams}}
                    "{{baseName}}": params.{{paramName}},
{{/headerParams}}
                },
{{#hasFormParams}}
               body: querystring.stringify({ {{#formParams}}
                  "{{baseName}}": params.{{paramName}},{{/formParams}}
               })
{{/hasFormParams}}
{{#hasBodyParam}}
        {{#bodyParam}}
               body: JSON.stringify(params["{{paramName}}"])
        {{/bodyParam}}
{{/hasBodyParam}}
            }
        };
    },
{{/operation}}
}

/**
 * {{classname}} - functional programming interface{{#description}}
 * {{&description}}{{/description}}
 */
export const {{classname}}Fp = {
{{#operation}}
    /** {{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{/allParams}}
     */
    {{nickname}}({{#hasParams}}params: { {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}; {{/allParams}} }{{/hasParams}}): (fetch?: FetchAPI, basePath?: string) => Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}> {
        const fetchArgs = {{classname}}FetchParamCreactor.{{nickname}}({{#hasParams}}params{{/hasParams}});
        return (fetch: FetchAPI = FetchImpl, basePath: string = BasePath) => fetch(basePath + fetchArgs.url, fetchArgs.options)
            .then({{#returnType}}toJsonOrThrow{{/returnType}}{{^returnType}}idOrThrow{{/returnType}});
    },
{{/operation}}
};

/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{&description}}{{/description}}
 */
export class {{classname}} extends BaseAPI {
{{#operation}}
    /** {{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{/allParams}}
     */
    {{nickname}}({{#hasParams}}params: { {{#allParams}} {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/allParams}} }{{/hasParams}}) {
        return {{classname}}Fp.{{nickname}}({{#hasParams}}params{{/hasParams}})(this.fetch, this.basePath);
    }
{{/operation}}
};

/**
 * {{classname}} - factory interface{{#description}}
 * {{&description}}{{/description}}
 */
export const {{classname}}Factory = function (fetch: FetchAPI = FetchImpl, basePath: string = BasePath) {
    return {
{{#operation}}
        /** {{#summary}}
         * {{summary}}{{/summary}}{{#notes}}
         * {{notes}}{{/notes}}{{#allParams}}
         * @param {{paramName}} {{description}}{{/allParams}}
         */
        {{nickname}}({{#hasParams}}params: { {{#allParams}} {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/allParams}} }{{/hasParams}}) {
            return {{classname}}Fp.{{nickname}}({{#hasParams}}params{{/hasParams}})(fetch, basePath);
        },
{{/operation}}
    }
};

{{/operations}}
{{/apis}}
{{/apiInfo}}
